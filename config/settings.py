"""
Django settings for fileupload project.

Generated by 'django-admin startproject' using Django 2.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
import re

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '@^bpx#=r&-1jlz4&9bi+u^-j2rpf!98t7$vk#1ej59=tnw@av('

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    'fileupload',
]


# Application definition

# django apps
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

# installed aps
INSTALLED_APPS += [
    'rest_framework',
]

# project apps
INSTALLED_APPS += [
    'file_processing.apps.FileProcessingConfig',
    'api.apps.ApiConfig',
    'suppliers.apps.SuppliersConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    },
    'suppliers_db': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'suppliers_db.sqlite3'),
        # need managed=True on the models in development mode to create the database
        # when True requires next commands:
        # ./manage.py makemigrations
        # ./manage.py migrate --database=suppliers_db
    }
}

DATABASE_ROUTERS = [
    'suppliers.router.SuppliersRouter'
]

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/
STATIC_URL = '/static/'

CELERY_BROKER_URL = 'redis://localhost:6379/0'

# SUPPLIERS_TABLES_MANAGED is used on the suppliers app models.
# Defines if we want to manage the database and create migrations for it.
# Should be SUPPLIERS_TABLES_MANAGED = False in development mode
SUPPLIERS_TABLES_MANAGED = True
# base dir for file upload
UPLOADS_DIR = 'uploads'
# used by api to validate the file mime type
ALLOWED_MIME_TYPES = [
    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
    'application/vnd.ms-excel',
    'application/octet-stream',
    'text/csv'
]
# pattern to convert date string taken from filename to python date object
DATE_FORMAT = '%d.%m.%Y'
# used by api to validate currencies
ALLOWED_CURRENCIES = ['EUR', 'GBP']
# used by api to validate extension
ALLOWED_FILE_EXTENSIONS = ['csv', 'xls', 'xlsx']
# pattern to match filename
FILENAME_PATTERN = '-(?P<currency>{currencies})' \
                   '_(?P<date>\d{{2}}\.\d{{2}}\.\d{{4}})' \
                   '\.(?P<extension>{extensions})$'.format(
    currencies='|'.join(ALLOWED_CURRENCIES),
    extensions='|'.join(ALLOWED_FILE_EXTENSIONS))
# regex to parse currency date and extension from filename
FILENAME_REGEX = re.compile(FILENAME_PATTERN, re.IGNORECASE)
